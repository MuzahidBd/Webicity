public class BlockLevelBoxImp extends MutableBoxBase implements MutableBlockLevelBox {	
	
	@Override
	public CullingFilter getPaintCullingFilter() {
		// TODO
		Position pos = getFinalPos();
		Dimension size = getFinalSize();
		return vp -> vp.intersects(new Rectangle(
			pos.getX(), pos.getY(),
			size.getWidth(), size.getHeight()));
	}
	
}

public InlineLevelBox[] split(RendererData rd, int width, WebRenderContext context, boolean first) {
		
		InlineLevelBox.autoRenderSplit(this, rd, context);
		
		if (first) {
			return new InlineLevelBox[] { this, null };
		}
		
		if (getFinalSize().getWidth() <= width) {
			return new InlineLevelBox[] { this, null };
		} else {
			return new InlineLevelBox[] { null, new CachedRenderBox(this) };
		}
		
	}
	
public class InlineLevelBoxImp extends MultiBoxBase implements InlineLevelBox {
	
	@Override
	public InlineLevelBox[] split(RendererData rd, int width, WebRenderContext context, boolean first) {
		//TODO: Why is some text not appearing
		int totalWidth = 0;
		int totalHeight = 0;
		
		List<Box> preSplit = new ArrayList<>();
		List<Box> postSplit = new ArrayList<>();
		
		int i = 0;
		while (i < children.size()) {
			InlineLevelBox[] split = ((InlineLevelBox) children.get(i))
				.split(rd, width - totalWidth, context, first);
			i++;
			
			InlineLevelBox firstLine = split[0];
			
			if (first) {
				first = false;
			}
			
			if (firstLine != null) {
				Dimension firstLineSize = firstLine.getFinalSize();
				totalWidth += firstLineSize.getWidth();
				totalHeight = totalHeight < firstLineSize.getHeight() ?
					firstLineSize.getHeight() :
					totalHeight;
				
				//TODO: ProxyBoxes *really* aren't the best (or most reliable) solution.
				preSplit.add(new ProxyBox(firstLine));
			}
			
			if (split[1] != null) {
				postSplit.add(split[1]);
				break;
			}
			
			if (firstLine == null) {
				break;
			}
		}
		
		for (int j = i; j < children.size(); j++) {
			//TODO: Avoid this copy-op
			postSplit.add(children.get(j));
		}
		
		InlineLevelBox firstLine = createBoxFor(preSplit);
		if (firstLine != null) {
			firstLine.setFinalPos(new Position(0, 0));
			firstLine.setFinalSize(new Dimension(totalWidth, totalHeight));
			firstLine.render(rd, new SizePosGroup(width, 0, totalWidth, 0, width, -1), context);
		}
		
		return new InlineLevelBox[] {
			firstLine,
			createBoxFor(postSplit)
		};
	}

	private InlineLevelBox createBoxFor(List<Box> boxes) {
		if (boxes.size() == 0) {
			return null;
		}
		
		//TODO: Split the content?
		InlineLevelBox box = new InlineLevelBoxImp(parent, content.split(), boxes);
		box.setProperties(getProperties());
		return box;
	}

}